<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head') %> <!-- Loads meta, styles, charts, socket.io -->
  <title>üè¢ Smart Building Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #eef2f7;
      margin: 0;
      padding: 20px;
      transition: background 0.3s, color 0.3s;
    }
    body.dark {
      background-color: #1e1e1e;
      color: #f0f0f0;
    }
    .container {
      max-width: 1000px;
      margin: auto;
      background: white;
      padding: 30px;
      border-radius: 16px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    }
    body.dark .container {
      background: #2a2a2a;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 10px;
    }
    h1 {
      font-size: 26px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .refresh {
      font-size: 14px;
      color: #777;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    .dark-mode-toggle {
      background: #f0f0f0;
      border: none;
      padding: 8px 14px;
      font-size: 14px;
      border-radius: 6px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    body.dark .dark-mode-toggle {
      background: #444;
      color: #f1f1f1;
    }
    .floor-heading {
      margin-top: 30px;
      font-size: 20px;
      font-weight: bold;
      border-bottom: 2px solid #ddd;
      padding-bottom: 5px;
    }
    .card {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-top: 10px;
    }
    .sensor-box {
      background: #f9fbfe;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.05);
      display: flex;
      align-items: center;
      gap: 15px;
    }
    .sensor-box i {
      font-size: 28px;
      color: #007bff;
    }
    .sensor-label {
      font-weight: bold;
    }
    .sensor-value {
      font-size: 20px;
    }
    .status-alert {
      text-align: center;
      margin: 10px 0;
      font-weight: bold;
      font-size: 16px;
    }
    .highlight {
      animation: flash 1.5s ease;
    }
    @keyframes flash {
      0%, 100% { background-color: transparent; }
      50% { background-color: yellow; }
    }
    .nav {
      text-align: center;
      margin-top: 40px;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
    }
    .nav a {
      color: #007bff;
      font-weight: bold;
      text-decoration: none;
    }
    .nav a:hover {
      text-decoration: underline;
    }
  </style>
  <script defer>
    document.addEventListener("DOMContentLoaded", () => {
      const socket = io();

      socket.on('sensor-update', (data) => {
        const { floor, temp, humidity, gas, vibration, flame, motion } = data;
        if (temp !== undefined) document.getElementById(`temp-floor-${floor}`).textContent = `${temp} ¬∞C`;
        if (humidity !== undefined) document.getElementById(`humidity-floor-${floor}`).textContent = `${humidity} %`;
        if (gas !== undefined) document.getElementById(`gas-floor-${floor}`).textContent = gas;
        if (vibration !== undefined) document.getElementById(`vibration-floor-${floor}`).textContent = vibration;
        if (flame !== undefined) document.getElementById(`flame-floor-${floor}`).textContent = flame ? "üî• Flame Detected" : "‚úÖ Normal";
        if (motion !== undefined) document.getElementById(`motion-floor-${floor}`).textContent = motion ? "üë§ Motion Detected" : "‚úÖ No Motion";
      });

      socket.on('ml-alert', ({ type, floor }) => {
        const alertBox = document.getElementById(`ml-alert-${floor}`);
        if (alertBox) {
          alertBox.textContent = `‚ö† ML Alert: ${type.toUpperCase()}`;
          alertBox.style.color = 'red';
          alertBox.classList.add('highlight');
          setTimeout(() => alertBox.classList.remove('highlight'), 1500);
        }
      });

      socket.on('ml-normal', ({ floor }) => {
        const alertBox = document.getElementById(`ml-alert-${floor}`);
        if (alertBox) {
          alertBox.textContent = `‚úÖ ML Status: Normal`;
          alertBox.style.color = 'green';
          alertBox.classList.add('highlight');
          setTimeout(() => alertBox.classList.remove('highlight'), 1500);
        }
      });

      const body = document.body;
      const toggleBtn = document.querySelector('.dark-mode-toggle');
      const icon = toggleBtn.querySelector('i');
      const label = toggleBtn.querySelector('.mode-label');

      function setMode(mode) {
        if (mode === 'enabled') {
          body.classList.add('dark');
          icon.classList.replace('fa-moon', 'fa-sun');
          label.textContent = 'Light Mode';
        } else {
          body.classList.remove('dark');
          icon.classList.replace('fa-sun', 'fa-moon');
          label.textContent = 'Dark Mode';
        }
      }

      const saved = localStorage.getItem('darkMode') || 'disabled';
      setMode(saved);

      toggleBtn.addEventListener('click', () => {
        const isEnabled = body.classList.contains('dark');
        const newMode = isEnabled ? 'disabled' : 'enabled';
        setMode(newMode);
        localStorage.setItem('darkMode', newMode);
      });
    });
  </script>
</head>
<body>
  <%- include('partials/navbar') %> <!-- Optional: load top nav bar -->
  <div class="container">
    <div class="header">
      <h1><i class="fas fa-building"></i> Smart Building Dashboard</h1>
      <span class="refresh"><i class="fas fa-sync-alt"></i> Auto-refreshing</span>
      <button class="dark-mode-toggle"><i class="fas fa-moon"></i> <span class="mode-label">Dark Mode</span></button>
    </div>

    <% const now = new Date(); %>
    <% for (let floor = 1; floor <= 4; floor++) {
      const data = dataByFloor[floor];
      const updatedAt = data ? new Date(data.createdAt) : null;
      const diff = data ? Math.floor((now - updatedAt) / 1000) : null;
      const days = diff ? Math.floor(diff / 86400) : 0;
      const hrs = diff ? Math.floor((diff % 86400) / 3600) : 0;
      const mins = diff ? Math.floor((diff % 3600) / 60) : 0;
      const secs = diff ? diff % 60 : 0;
    %>
      <div class="floor-heading">üè¢ Floor <%= floor %></div>

      <% if (data) { %>
        <% if (diff > 30) { %>
          <div class="status-alert" style="color: red;">‚ö† No updates for <%= days %>d <%= hrs %>h <%= mins %>m <%= secs %>s</div>
        <% } %>

        <div class="card">
          <div class="sensor-box"><i class="fas fa-thermometer-half"></i>
            <div><div class="sensor-label">Temperature</div><div class="sensor-value" id="temp-floor-<%= floor %>">
              <% if (data['temp'] !== undefined) { %>
                <%= data['temp'] %> ¬∞C
              <% } else { %>
                N/A
              <% } %>
            </div></div>
          </div>
          <div class="sensor-box"><i class="fas fa-tint"></i>
            <div><div class="sensor-label">Humidity</div><div class="sensor-value" id="humidity-floor-<%= floor %>">
              <% if (data['humidity'] !== undefined) { %>
                <%= data['humidity'] %> %
              <% } else { %>
                N/A
              <% } %>
            </div></div>
          </div>
          <div class="sensor-box"><i class="fas fa-smog"></i>
            <div><div class="sensor-label">Gas</div><div class="sensor-value" id="gas-floor-<%= floor %>">
              <% if (data['gas'] !== undefined) { %>
                <%= data['gas'] %>
              <% } else { %>
                N/A
              <% } %>
            </div></div>
          </div>
          <div class="sensor-box"><i class="fas fa-ruler-vertical"></i>
            <div><div class="sensor-label">Vibration</div><div class="sensor-value" id="vibration-floor-<%= floor %>">
              <% if (data['vibration'] !== undefined) { %>
                <%= data['vibration'] %>
              <% } else { %>
                N/A
              <% } %>
            </div></div>
          </div>
          <div class="sensor-box"><i class="fas fa-fire"></i>
            <div><div class="sensor-label">Flame</div><div class="sensor-value" id="flame-floor-<%= floor %>">
              <% if (data['flame'] !== undefined) { %>
                <%= data['flame'] ? 'üî• Flame Detected' : '‚úÖ Normal' %>
              <% } else { %>
                N/A
              <% } %>
            </div></div>
          </div>
          <div class="sensor-box"><i class="fas fa-running"></i>
            <div><div class="sensor-label">Motion</div><div class="sensor-value" id="motion-floor-<%= floor %>">
              <% if (data['motion'] !== undefined) { %>
                <%= data['motion'] ? 'üë§ Detected' : '‚úÖ None' %>
              <% } else { %>
                N/A
              <% } %>
            </div></div>
          </div>
        </div>

        <div id="ml-alert-<%= floor %>" class="status-alert" style="margin-top: 10px; color: <%= data.mlAlert ? 'red' : 'green' %>;">
          <%= data.mlAlert ? `‚ö† ML Alert: ${data.mlAlert.toUpperCase()}` : '‚úÖ ML Status: Normal' %>
        </div>

        <div style="text-align: center; margin-top: 10px; font-size: 14px;">
          <i class="fas fa-clock"></i> Last updated: <%= updatedAt.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' }) %>
        </div>
      <% } else { %>
        <p style="text-align: center; color: #888;">No data available for Floor <%= floor %></p>
      <% } %>
    <% } %>

    <div class="nav">
      <a href="/history">üìú View History</a>
      <a href="/charts">üìà View Charts</a>
      <a href="/live">üì∑ View Live (ESP32-CAM)</a>
    </div>
  </div>
</body>
</html> 
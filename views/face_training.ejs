<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>ðŸŽ¯ Face Training System</title>
  <link rel="stylesheet" href="/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <style>
    :root {
      --primary: #667eea;
      --secondary: #764ba2;
      --success: #28a745;
      --warning: #ffc107;
      --danger: #dc3545;
      --dark: #2c3e50;
      --light: #f8f9fa;
    }

    body {
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .header {
      text-align: center;
      color: white;
      margin-bottom: 30px;
    }

    .header h1 {
      font-size: 2.5rem;
      margin: 0;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .training-section {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      padding: 25px;
      margin-bottom: 30px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .training-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 30px;
      margin-bottom: 30px;
    }

    .camera-section {
      text-align: center;
    }

    .camera-container {
      position: relative;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
      margin-bottom: 20px;
      background: #f0f0f0;
      min-height: 300px;
    }

    .camera-feed {
      width: 100%;
      height: 300px;
      object-fit: cover;
      display: none;
    }

    .camera-placeholder {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      color: #666;
    }

    .camera-placeholder i {
      font-size: 3rem;
      margin-bottom: 10px;
      color: #999;
    }

    .controls {
      display: flex;
      gap: 10px;
      justify-content: center;
      flex-wrap: wrap;
    }

    .control-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .control-btn.primary {
      background: var(--primary);
      color: white;
    }

    .control-btn.success {
      background: var(--success);
      color: white;
    }

    .control-btn.warning {
      background: var(--warning);
      color: var(--dark);
    }

    .control-btn.danger {
      background: var(--danger);
      color: white;
    }

    .control-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .training-form {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 15px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      color: var(--dark);
    }

    .form-group input {
      width: 100%;
      padding: 10px;
      border: 2px solid #ddd;
      border-radius: 8px;
      font-size: 1rem;
    }

    .form-group input:focus {
      outline: none;
      border-color: var(--primary);
    }

    .known-faces {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      padding: 25px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .faces-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .face-card {
      background: #f8f9fa;
      border-radius: 10px;
      padding: 15px;
      text-align: center;
      border: 2px solid #ddd;
      transition: all 0.3s ease;
    }

    .face-card:hover {
      border-color: var(--primary);
      transform: translateY(-2px);
    }

    .face-card h4 {
      margin: 0 0 10px 0;
      color: var(--dark);
    }

    .face-card p {
      margin: 5px 0;
      color: #666;
      font-size: 0.9rem;
    }

    .status-indicator {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 5px;
    }

    .status-trained {
      background: var(--success);
    }

    .status-partial {
      background: var(--warning);
    }

    .status-untrained {
      background: var(--danger);
    }

    .alert {
      padding: 15px;
      border-radius: 8px;
      margin: 15px 0;
      display: none;
    }

    .alert.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .alert.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }

    .back {
      text-align: center;
      margin-top: 30px;
    }

    .back a {
      color: white;
      text-decoration: none;
      font-weight: bold;
      padding: 10px 20px;
      background: rgba(255,255,255,0.2);
      border-radius: 25px;
      transition: all 0.3s ease;
    }

    .back a:hover {
      background: rgba(255,255,255,0.3);
      transform: translateY(-2px);
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1><i class="fas fa-user-graduate"></i> Face Training System</h1>
      <p>Train the AI to recognize authorized personnel</p>
    </div>

    <div class="training-section">
      <h2><i class="fas fa-camera"></i> Camera Training</h2>
      
      <div class="training-grid">
        <div class="camera-section">
          <div class="camera-container">
            <video id="camera-feed" class="camera-feed" autoplay></video>
            <canvas id="capture-canvas" style="display: none;"></canvas>
            <div class="camera-placeholder" id="camera-placeholder">
              <i class="fas fa-camera"></i>
              <div>Camera not started</div>
            </div>
          </div>
          
          <div class="controls">
            <button class="control-btn primary" id="start-camera">
              <i class="fas fa-play"></i> Start Camera
            </button>
            <button class="control-btn success" id="capture-photo" disabled>
              <i class="fas fa-camera"></i> Capture Photo
            </button>
            <button class="control-btn warning" id="stop-camera" disabled>
              <i class="fas fa-stop"></i> Stop Camera
            </button>
          </div>
        </div>

        <div class="training-form">
          <h3><i class="fas fa-user-plus"></i> Add New Person</h3>
          
          <div class="form-group">
            <label for="person-name">Person Name:</label>
            <input type="text" id="person-name" placeholder="Enter person's name" />
          </div>
          
          <div class="form-group">
            <label for="confidence-threshold">Confidence Threshold:</label>
            <input type="range" id="confidence-threshold" min="0.5" max="0.95" step="0.05" value="0.8" />
            <span id="threshold-value">80%</span>
          </div>
          
          <button class="control-btn success" id="train-face" disabled>
            <i class="fas fa-graduation-cap"></i> Train Face
          </button>
          
          <div class="alert" id="training-alert"></div>
        </div>
      </div>
    </div>

    <div class="known-faces">
      <h2><i class="fas fa-users"></i> Known Faces</h2>
      <div class="faces-grid" id="faces-grid">
        <!-- Known faces will be loaded here -->
      </div>
    </div>

    <div class="back">
      <a href="/live"><i class="fas fa-arrow-left"></i> Back to Live Monitoring</a>
      <a href="/evacuation"><i class="fas fa-route"></i> Evacuation Routes</a>
    </div>
  </div>

  <script>
    let stream = null;
    let capturedImage = null;
    const FLASK_SERVER_URL = 'http://localhost:5000'; // Update with your Flask server URL

    // Camera controls
    document.getElementById('start-camera').addEventListener('click', startCamera);
    document.getElementById('stop-camera').addEventListener('click', stopCamera);
    document.getElementById('capture-photo').addEventListener('click', capturePhoto);
    document.getElementById('train-face').addEventListener('click', trainFace);
    
    // Confidence threshold slider
    document.getElementById('confidence-threshold').addEventListener('input', function() {
      const value = Math.round(this.value * 100);
      document.getElementById('threshold-value').textContent = value + '%';
    });

    async function startCamera() {
      try {
        stream = await navigator.mediaDevices.getUserMedia({ 
          video: { 
            width: 640, 
            height: 480,
            facingMode: 'user'
          } 
        });
        
        const video = document.getElementById('camera-feed');
        video.srcObject = stream;
        video.style.display = 'block';
        document.getElementById('camera-placeholder').style.display = 'none';
        
        document.getElementById('start-camera').disabled = true;
        document.getElementById('capture-photo').disabled = false;
        document.getElementById('stop-camera').disabled = false;
        
        showAlert('Camera started successfully', 'success');
      } catch (error) {
        console.error('Error starting camera:', error);
        showAlert('Error starting camera: ' + error.message, 'error');
      }
    }

    function stopCamera() {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
        stream = null;
      }
      
      document.getElementById('camera-feed').style.display = 'none';
      document.getElementById('camera-placeholder').style.display = 'block';
      
      document.getElementById('start-camera').disabled = false;
      document.getElementById('capture-photo').disabled = true;
      document.getElementById('stop-camera').disabled = true;
      document.getElementById('train-face').disabled = true;
      
      capturedImage = null;
      showAlert('Camera stopped', 'success');
    }

    function capturePhoto() {
      const video = document.getElementById('camera-feed');
      const canvas = document.getElementById('capture-canvas');
      const ctx = canvas.getContext('2d');
      
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      ctx.drawImage(video, 0, 0);
      
      capturedImage = canvas.toDataURL('image/jpeg', 0.8);
      document.getElementById('train-face').disabled = false;
      
      showAlert('Photo captured! Ready for training.', 'success');
    }

    async function trainFace() {
      const personName = document.getElementById('person-name').value.trim();
      const confidenceThreshold = document.getElementById('confidence-threshold').value;
      
      if (!personName) {
        showAlert('Please enter a person name', 'error');
        return;
      }
      
      if (!capturedImage) {
        showAlert('Please capture a photo first', 'error');
        return;
      }
      
      try {
        const response = await fetch(`${FLASK_SERVER_URL}/train-face`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: personName,
            image: capturedImage,
            confidence_threshold: parseFloat(confidenceThreshold)
          })
        });
        
        const result = await response.json();
        
        if (response.ok) {
          showAlert(`Face trained successfully for ${personName}`, 'success');
          document.getElementById('person-name').value = '';
          document.getElementById('train-face').disabled = true;
          capturedImage = null;
          loadKnownFaces();
        } else {
          showAlert('Training failed: ' + result.error, 'error');
        }
      } catch (error) {
        console.error('Error training face:', error);
        showAlert('Error training face: ' + error.message, 'error');
      }
    }

    async function loadKnownFaces() {
      try {
        const response = await fetch(`${FLASK_SERVER_URL}/known-faces`);
        const result = await response.json();
        
        if (response.ok) {
          displayKnownFaces(result.faces);
        } else {
          console.error('Error loading known faces:', result.error);
        }
      } catch (error) {
        console.error('Error loading known faces:', error);
      }
    }

    function displayKnownFaces(faces) {
      const grid = document.getElementById('faces-grid');
      
      if (faces.length === 0) {
        grid.innerHTML = '<p style="text-align: center; color: #666; grid-column: 1 / -1;">No faces trained yet</p>';
        return;
      }
      
      grid.innerHTML = faces.map(face => `
        <div class="face-card">
          <h4>${face.name}</h4>
          <p>
            <span class="status-indicator ${getStatusClass(face.encodings_count)}"></span>
            ${getStatusText(face.encodings_count)}
          </p>
          <p>Encodings: ${face.encodings_count}/5</p>
          <p>Threshold: ${Math.round(face.confidence_threshold * 100)}%</p>
        </div>
      `).join('');
    }

    function getStatusClass(count) {
      if (count >= 3) return 'status-trained';
      if (count >= 1) return 'status-partial';
      return 'status-untrained';
    }

    function getStatusText(count) {
      if (count >= 3) return 'Well Trained';
      if (count >= 1) return 'Partially Trained';
      return 'Needs Training';
    }

    function showAlert(message, type) {
      const alert = document.getElementById('training-alert');
      alert.textContent = message;
      alert.className = `alert ${type}`;
      alert.style.display = 'block';
      
      setTimeout(() => {
        alert.style.display = 'none';
      }, 5000);
    }

    // Load known faces on page load
    document.addEventListener('DOMContentLoaded', () => {
      loadKnownFaces();
    });
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>üìà Smart Building Charts</title>
  <link rel="stylesheet" href="/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    :root {
      --bg: #f4f6f9;
      --text: #2c3e50;
      --heading: #2c3e50;
      --card-bg: #ffffff;
    }
    [data-theme="dark"] {
      --bg: #121212;
      --text: #e0e0e0;
      --heading: #f0f0f0;
      --card-bg: #1e1e1e;
    }
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: var(--bg);
      color: var(--text);
      padding: 20px;
      transition: background 0.3s ease;
    }
    h1 {
      text-align: center;
      color: var(--heading);
    }
    .filters {
      max-width: 1000px;
      margin: 20px auto;
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      justify-content: center;
    }
    .filters select,
    .filters input[type="checkbox"],
    .filters button {
      padding: 8px 14px;
      font-size: 14px;
      border-radius: 6px;
      border: 1px solid #ccc;
    }
    .chart-section {
      max-width: 1000px;
      margin: 30px auto;
      background: var(--card-bg);
      padding: 25px;
      border-radius: 16px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    .chart-section h2 {
      text-align: center;
      margin-bottom: 10px;
      color: var(--heading);
    }
    canvas {
      max-height: 350px;
      width: 100%;
    }
    .controls {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 10px;
      flex-wrap: wrap;
    }
    .controls button {
      padding: 6px 12px;
      border: none;
      border-radius: 6px;
      background: #007bff;
      color: white;
      cursor: pointer;
      font-size: 13px;
    }
    .no-data {
      text-align: center;
      font-size: 18px;
      color: #888;
      margin-top: 60px;
    }
    .back {
      text-align: center;
      margin-top: 40px;
    }
    .back a {
      text-decoration: none;
      font-weight: bold;
      color: #007bff;
      margin: 0 10px;
    }
    .theme-toggle {
      position: fixed;
      top: 20px;
      right: 20px;
    }
    .theme-toggle button {
      padding: 8px 12px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    
    /* AI/ML Analytics Styles */
    .ai-analytics {
      max-width: 1000px;
      margin: 30px auto;
      background: var(--card-bg);
      padding: 25px;
      border-radius: 16px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      border-left: 4px solid #4caf50;
    }
    .ai-analytics h3 {
      color: var(--heading);
      margin-bottom: 20px;
      text-align: center;
    }
    .ai-metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
    }
    .ai-metric {
      background: rgba(76, 175, 80, 0.1);
      padding: 15px;
      border-radius: 8px;
      border-left: 3px solid #4caf50;
    }
    .ai-metric h4 {
      margin: 0 0 10px 0;
      color: var(--heading);
    }
    .ai-metric p {
      margin: 5px 0;
      font-size: 14px;
    }
    .ai-alerts {
      position: fixed;
      top: 80px;
      right: 20px;
      z-index: 1000;
      max-width: 300px;
    }
    .ai-alert {
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      color: #856404;
      padding: 12px;
      margin-bottom: 10px;
      border-radius: 6px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .ai-alert-warning {
      background: #f8d7da;
      border-color: #f5c6cb;
      color: #721c24;
    }
    .ai-alert button {
      background: none;
      border: none;
      font-size: 18px;
      cursor: pointer;
      color: inherit;
    }
    .ai-features {
      max-width: 1000px;
      margin: 20px auto;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }
    .ai-feature {
      background: var(--card-bg);
      padding: 15px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .ai-feature i {
      font-size: 24px;
      color: #4caf50;
      margin-bottom: 8px;
    }

    /* Performance Metrics Styles */
    .performance-metrics {
      max-width: 1000px;
      margin: 30px auto;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      justify-content: center;
    }
    .metric-card {
      background: var(--card-bg);
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      text-align: center;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    .metric-card i {
      font-size: 36px;
      color: #4caf50;
      margin-bottom: 10px;
    }
    .metric-card h4 {
      color: var(--heading);
      margin-bottom: 5px;
    }
    .metric-card p {
      font-size: 18px;
      font-weight: bold;
      color: #333;
    }
  </style>
</head>
<body data-theme="light">
  <div class="theme-toggle">
    <button id="toggleTheme"><i class="fas fa-adjust"></i> Toggle Theme</button>
  </div>

  <h1>üìà Smart Building Charts</h1>

  <!-- AI Features Overview -->
  <div class="ai-features">
    <div class="ai-feature">
      <i class="fas fa-brain"></i>
      <div>AI Predictions</div>
    </div>
    <div class="ai-feature">
      <i class="fas fa-exclamation-triangle"></i>
      <div>Anomaly Detection</div>
    </div>
    <div class="ai-feature">
      <i class="fas fa-chart-line"></i>
      <div>Trend Analysis</div>
    </div>
    <div class="ai-feature">
      <i class="fas fa-bell"></i>
      <div>Smart Alerts</div>
    </div>
  </div>

  <form class="filters" method="GET" action="/charts">
    <select name="floor">
      <% for (let i = 1; i <= 4; i++) { %>
        <option value="<%= i %>" <%= parseInt(query.floor) === i ? 'selected' : '' %>>üè¢ Floor <%= i %></option>
      <% } %>
    </select>
    <select name="range">
      <option value="">üìÖ All Time</option>
      <option value="1h" <%= query.range === '1h' ? 'selected' : '' %>>‚è± Last 1 Hour</option>
      <option value="24h" <%= query.range === '24h' ? 'selected' : '' %>>üïí Last 24 Hours</option>
      <option value="7d" <%= query.range === '7d' ? 'selected' : '' %>>üìÜ Last 7 Days</option>
    </select>
    <select name="chartType">
      <option value="line">üìà Line Chart</option>
      <option value="bar">üìä Bar Chart</option>
      <option value="area">üü¶ Area Chart</option>
    </select>
    <label>
      <input type="checkbox" name="showPredictions" value="true" checked> üß† Show AI Predictions
    </label>
    <label>
      <input type="checkbox" name="showAnomalies" value="true" checked> ‚ö†Ô∏è Show Anomalies
    </label>

    <button type="submit">üîç Apply</button>
  </form>

  <!-- Performance Metrics -->
  <div class="performance-metrics">
    <div class="metric-card">
      <i class="fas fa-clock"></i>
      <div>
        <h4>Data Points</h4>
        <p id="dataPoints">Loading...</p>
      </div>
    </div>
    <div class="metric-card">
      <i class="fas fa-chart-line"></i>
      <div>
        <h4>Trend Direction</h4>
        <p id="trendDirection">Loading...</p>
      </div>
    </div>
    <div class="metric-card">
      <i class="fas fa-exclamation-triangle"></i>
      <div>
        <h4>Anomalies Detected</h4>
        <p id="anomalyCount">Loading...</p>
      </div>
    </div>
    <div class="metric-card">
      <i class="fas fa-brain"></i>
      <div>
        <h4>AI Confidence</h4>
        <p id="aiConfidence">Loading...</p>
      </div>
    </div>
  </div>

  <!-- AI Analytics Dashboard -->
  <div id="ai-analytics"></div>

  <script>
    // Initialize sensorData globally with fallback to sample data
    let sensorData = <%- JSON.stringify(records.map(r => ({
      createdAt: r.createdAt,
      temperature: r.temp || r.temperature,
      humidity: r.humidity,
      gas: r.gas,
      flame: r.flame ? 1 : 0,
      motion: r.motion ? 1 : 0,
      vibration: r.vibration ?? 0,
      mlPrediction: r.mlPrediction ?? null
    }))) %>;
    
    // Generate sample data if no real data exists
    if (!sensorData || sensorData.length === 0) {
      console.log('No sensor data found, generating sample data...');
      sensorData = [];
      const now = new Date();
      
      for (let i = 0; i < 50; i++) {
        const timestamp = new Date(now.getTime() - (50 - i) * 60000);
        sensorData.push({
          createdAt: timestamp,
          temperature: 20 + Math.sin(i * 0.2) * 5 + Math.random() * 2,
          humidity: 50 + Math.cos(i * 0.3) * 10 + Math.random() * 5,
          gas: 200 + Math.sin(i * 0.1) * 50 + Math.random() * 20,
          flame: Math.random() > 0.95 ? 1 : 0,
          motion: Math.random() > 0.8 ? 1 : 0,
          vibration: Math.random() * 2 + Math.sin(i * 0.4) * 0.5
        });
      }
    }
    
    // Make sensorData globally available for charts.js
    window.sensorData = sensorData;
    
    // Update performance metrics
    document.addEventListener('DOMContentLoaded', () => {
      if (sensorData && sensorData.length > 0) {
        document.getElementById('dataPoints').textContent = sensorData.length;
        
        // Calculate trend direction
        const values = sensorData.map(d => d.temperature || d.humidity || d.gas || 0);
        const trend = values[values.length - 1] > values[0] ? '‚ÜóÔ∏è Rising' : 
                     values[values.length - 1] < values[0] ? '‚ÜòÔ∏è Falling' : '‚Üí Stable';
        document.getElementById('trendDirection').textContent = trend;
        
        // Calculate anomalies (simplified)
        const mean = values.reduce((a, b) => a + b, 0) / values.length;
        const anomalies = values.filter(v => Math.abs(v - mean) > mean * 0.3).length;
        document.getElementById('anomalyCount').textContent = anomalies;
        
        // AI confidence based on data quality
        const confidence = Math.min(95, Math.max(60, 100 - (anomalies / values.length * 100)));
        document.getElementById('aiConfidence').textContent = `${confidence.toFixed(1)}%`;
      }
    });
  </script>

  <% if (records.length === 0) { %>
    <div class="no-data">No records found for selected filters.</div>
  <% } else { %>
    <% const sensors = [
      { id: 'tempChart', label: 'üå° Temperature (¬∞C)', key: 'temperature' },
      { id: 'humidityChart', label: 'üíß Humidity (%)', key: 'humidity' },
      { id: 'gasChart', label: 'üå´ Gas (ppm)', key: 'gas' },
      { id: 'flameChart', label: 'üî• Flame', key: 'flame' },
      { id: 'motionChart', label: 'üö∂ Motion', key: 'motion' },
      { id: 'vibrationChart', label: 'üí• Vibration', key: 'vibration' }
    ]; %>

    <% sensors.forEach(sensor => { %>
      <div class="chart-section">
        <h2><%= sensor.label %></h2>
        <canvas id="<%= sensor.id %>"></canvas>
        <div class="controls">
          <button onclick="toggleChartType('<%= sensor.id %>', '<%= sensor.key %>', '<%= sensor.label %>')">üîÑ Toggle Type</button>
          <button onclick="exportChart('<%= sensor.id %>')">üìÄ Export</button>
          <button onclick="printChart('<%= sensor.id %>')">üñ∏ Print</button>
          <button onclick="resetZoom('<%= sensor.id %>')">üîç Reset Zoom</button>
        </div>
      </div>
    <% }); %>

    <script src="/js/charts.js"></script>
  <% } %>

  <div class="back">
    <a href="/">‚Üê Back to Dashboard</a>
    <a href="/live">üì∑ View ESP32-CAM</a>
  </div>

  <script>
    const theme = localStorage.getItem("theme") || "light";
    document.body.setAttribute("data-theme", theme);
    document.getElementById("toggleTheme").addEventListener("click", () => {
      const newTheme = document.body.getAttribute("data-theme") === "light" ? "dark" : "light";
      document.body.setAttribute("data-theme", newTheme);
      localStorage.setItem("theme", newTheme);
    });
  </script>
</body>
</html>
